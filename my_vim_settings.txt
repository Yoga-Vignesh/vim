set nocompatible
filetype plugin indent on
syntax enable
set number
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent
set cursorline
set encoding=utf-8
set backspace=indent,eol,start
call plug#begin('~/.vim/plugged')  " For Neovim: ~/.local/share/nvim/plugged

" Syntax highlighting and language support
Plug 'octol/vim-cpp-enhanced-highlight'  " Enhanced C++ syntax highlighting

" Code completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}  " IntelliSense-like completion

" File navigation
Plug 'preservim/nerdtree'  " File explorer
Plug 'ctrlpvim/ctrlp.vim'   " Fuzzy file finder

" Code formatting
Plug 'rhysd/vim-clang-format'  " Auto-format C++ code with clang-format

" Status line
Plug 'vim-airline/vim-airline'  " Better status/tabline

" Git integration
Plug 'tpope/vim-fugitive'  " Git commands in Vim

call plug#end()

" CoC settings
set updatetime=300
set signcolumn=yes

" Use Tab for completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Go to definition
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Show documentation
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Auto-format on save
autocmd BufWritePre *.cpp,*.h,*.cc,*.hpp ClangFormat

nnoremap <C-n> :NERDTreeToggle<CR>

let g:airline#extensions#tabline#enabled = 1

" Compile and Run
autocmd FileType cpp nnoremap <F6> :w <bar> !g++ -std=c++17 % -o %:r<CR>
autocmd FileType cpp nnoremap <F5> :w <bar> !g++ -std=c++17 % -o %:r && ./%:r<CR>
